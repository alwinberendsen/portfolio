{"remainingRequest":"/Users/alwinberendsen/Projects/portfolio/node_modules/thread-loader/dist/cjs.js!/Users/alwinberendsen/Projects/portfolio/node_modules/babel-loader/lib/index.js!/Users/alwinberendsen/Projects/portfolio/node_modules/eslint-loader/index.js??ref--13-0!/Users/alwinberendsen/Projects/portfolio/src/main.js","dependencies":[{"path":"/Users/alwinberendsen/Projects/portfolio/src/main.js","mtime":1554057952252},{"path":"/Users/alwinberendsen/Projects/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/alwinberendsen/Projects/portfolio/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/alwinberendsen/Projects/portfolio/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/alwinberendsen/Projects/portfolio/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _Object$keys from \"/Users/alwinberendsen/Projects/portfolio/node_modules/@babel/runtime-corejs2/core-js/object/keys\";\nimport _Array$from from \"/Users/alwinberendsen/Projects/portfolio/node_modules/@babel/runtime-corejs2/core-js/array/from\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es6.object.assign\";\nimport \"core-js/modules/es7.promise.finally\";\nimport Vue from 'vue';\nimport App from './App.vue';\nimport VueRouter from 'vue-router';\nVue.use(VueRouter);\nVue.config.productionTip = false;\nvar routes = [{\n  path: '/',\n  component: App,\n  meta: {\n    title: 'Alwin Berendsen - Software Development',\n    metaTags: [{\n      name: 'description',\n      content: 'Alwin Berendsen - Software Development.'\n    }, {\n      property: 'og:description',\n      content: 'Alwin Berendsen - Software Development.'\n    }]\n  }\n}];\nvar router = new VueRouter({\n  routes: routes,\n  mode: 'history'\n}); // This callback runs before every route change, including on page load.\n\nrouter.beforeEach(function (to, from, next) {\n  // This goes through the matched routes from last to first, finding the closest route with a title.\n  // eg. if we have /some/deep/nested/route and /some, /deep, and /nested have titles, nested's will be chosen.\n  var nearestWithTitle = to.matched.slice().reverse().find(function (r) {\n    return r.meta && r.meta.title;\n  }); // Find the nearest route element with meta tags.\n\n  var nearestWithMeta = to.matched.slice().reverse().find(function (r) {\n    return r.meta && r.meta.metaTags;\n  });\n  var previousNearestWithMeta = from.matched.slice().reverse().find(function (r) {\n    return r.meta && r.meta.metaTags;\n  }); // If a route with a title was found, set the document (page) title to that value.\n\n  if (nearestWithTitle) document.title = nearestWithTitle.meta.title; // Remove any stale meta tags from the document using the key attribute we set below.\n\n  _Array$from(document.querySelectorAll('[data-vue-router-controlled]')).map(function (el) {\n    return el.parentNode.removeChild(el);\n  }); // Skip rendering meta tags if there are none.\n\n\n  if (!nearestWithMeta) return next(); // Turn the meta tag definitions into actual elements in the head.\n\n  nearestWithMeta.meta.metaTags.map(function (tagDef) {\n    var tag = document.createElement('meta');\n\n    _Object$keys(tagDef).forEach(function (key) {\n      tag.setAttribute(key, tagDef[key]);\n    }); // We use this to track which meta tags we create, so we don't interfere with other ones.\n\n\n    tag.setAttribute('data-vue-router-controlled', '');\n    return tag;\n  }) // Add the meta tags to the document head.\n  .forEach(function (tag) {\n    return document.head.appendChild(tag);\n  });\n  next();\n});\nnew Vue({\n  router: router,\n  render: function render(h) {\n    return h(App);\n  }\n}).$mount('#app');",{"version":3,"sources":["/Users/alwinberendsen/Projects/portfolio/src/main.js"],"names":["Vue","App","VueRouter","use","config","productionTip","routes","path","component","meta","title","metaTags","name","content","property","router","mode","beforeEach","to","from","next","nearestWithTitle","matched","slice","reverse","find","r","nearestWithMeta","previousNearestWithMeta","document","querySelectorAll","map","el","parentNode","removeChild","tagDef","tag","createElement","forEach","key","setAttribute","head","appendChild","render","h","$mount"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport App from './App.vue'\nimport VueRouter from 'vue-router';\n\nVue.use(VueRouter);\nVue.config.productionTip = false\nconst routes = [\n  {\n    path: '/',\n    component: App,\n    meta: {\n      title: 'Alwin Berendsen - Software Development',\n      metaTags: [\n        {\n          name: 'description',\n          content: 'Alwin Berendsen - Software Development.'\n        },\n        {\n          property: 'og:description',\n          content: 'Alwin Berendsen - Software Development.'\n        }\n      ]\n    }\n  },\n];\n\n\nconst router = new VueRouter({\n  routes,\n  mode: 'history'\n});\n\n// This callback runs before every route change, including on page load.\nrouter.beforeEach((to, from, next) => {\n  // This goes through the matched routes from last to first, finding the closest route with a title.\n  // eg. if we have /some/deep/nested/route and /some, /deep, and /nested have titles, nested's will be chosen.\n  const nearestWithTitle = to.matched.slice().reverse().find(r => r.meta && r.meta.title);\n  // Find the nearest route element with meta tags.\n  const nearestWithMeta = to.matched.slice().reverse().find(r => r.meta && r.meta.metaTags);\n  const previousNearestWithMeta = from.matched.slice().reverse().find(r => r.meta && r.meta.metaTags);\n  // If a route with a title was found, set the document (page) title to that value.\n  if(nearestWithTitle) document.title = nearestWithTitle.meta.title;\n  // Remove any stale meta tags from the document using the key attribute we set below.\n  Array.from(document.querySelectorAll('[data-vue-router-controlled]')).map(el => el.parentNode.removeChild(el));\n  // Skip rendering meta tags if there are none.\n  if(!nearestWithMeta) return next();\n  // Turn the meta tag definitions into actual elements in the head.\n  nearestWithMeta.meta.metaTags.map(tagDef => {\n    const tag = document.createElement('meta');\n    Object.keys(tagDef).forEach(key => {\n      tag.setAttribute(key, tagDef[key]);\n    });\n    // We use this to track which meta tags we create, so we don't interfere with other ones.\n    tag.setAttribute('data-vue-router-controlled', '');\n    return tag;\n  })\n  // Add the meta tags to the document head.\n      .forEach(tag => document.head.appendChild(tag));\n  next();\n});\n\nnew Vue({\n  router,\n  render: h => h(App),\n}).$mount('#app')\n"]}]}